def snail(snail_map):
    n = len(snail_map)
    side = n
    offset = 0
    massive = []
    if snail_map == [[]]:
        return massive
    else:
        while offset < n / 2:
            # верхняя строка
            for i in range(side):
                massive.append(snail_map[offset][offset + i])
            # правый столбец
            for i in range(side - 1):
                massive.append(snail_map[1 + offset + i][n - 1 - offset])
            # нижняя строка
            if n / 2 - offset > 0:
                for i in range(1, side):
                    massive.append(snail_map[n - 1 - offset][n - 1 - i - offset])
            # левый столбец
            for i in range(1, side - 1):
                massive.append(snail_map[n - 1 - i - offset][offset])
            side -= 2
            offset += 1
        return massive


array4 = [[1, 2, 3, 4],
          [12, 13, 14, 5],
          [11, 16, 15, 6],
          [10, 9, 8, 7]]

array3 = [[1, 2, 3],
          [8, 9, 4],
          [7, 6, 5]]

array7 = [[1, 2, 3, 4, 5, 6, 7],
          [24, 25, 26, 27, 28, 29, 8],
          [23, 40, 41, 42, 43, 30, 9],
          [22, 39, 48, 49, 44, 31, 10],
          [21, 38, 47, 46, 45, 32, 11],
          [20, 37, 36, 35, 34, 33, 12],
          [19, 18, 17, 16, 15, 14, 13]]

array10 = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
           [36, 37, 38, 39, 40, 41, 42, 43, 44, 11],
           [35, 64, 65, 66, 67, 68, 69, 70, 45, 12],
           [34, 63, 84, 85, 86, 87, 88, 71, 46, 13],
           [33, 62, 83, 96, 97, 98, 89, 72, 47, 14],
           [32, 61, 82, 95, 100, 99, 90, 73, 48, 15],
           [31, 60, 81, 94, 93, 92, 91, 74, 49, 16],
           [30, 59, 80, 79, 78, 77, 76, 75, 50, 17],
           [29, 58, 57, 56, 55, 54, 53, 52, 51, 18],
           [28, 27, 26, 25, 24, 23, 22, 21, 20, 19]]

array25 = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
           [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
            118, 119, 26],
           [95, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
            205, 120, 27],
           [94, 183, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
            206, 121, 28],
           [93, 182, 263, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 284,
            207, 122, 29],
           [92, 181, 262, 335, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 354, 285,
            208, 123, 30],
           [91, 180, 261, 334, 399, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 416, 355, 286,
            209, 124, 31],
           [90, 179, 260, 333, 398, 455, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 470, 417, 356, 287,
            210, 125, 32],
           [89, 178, 259, 332, 397, 454, 503, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 516, 471, 418, 357, 288,
            211, 126, 33],
           [88, 177, 258, 331, 396, 453, 502, 543, 576, 577, 578, 579, 580, 581, 582, 583, 554, 517, 472, 419, 358, 289,
            212, 127, 34],
           [87, 176, 257, 330, 395, 452, 501, 542, 575, 600, 601, 602, 603, 604, 605, 584, 555, 518, 473, 420, 359, 290,
            213, 128, 35],
           [86, 175, 256, 329, 394, 451, 500, 541, 574, 599, 616, 617, 618, 619, 606, 585, 556, 519, 474, 421, 360, 291,
            214, 129, 36],
           [85, 174, 255, 328, 393, 450, 499, 540, 573, 598, 615, 624, 625, 620, 607, 586, 557, 520, 475, 422, 361, 292,
            215, 130, 37],
           [84, 173, 254, 327, 392, 449, 498, 539, 572, 597, 614, 623, 622, 621, 608, 587, 558, 521, 476, 423, 362, 293,
            216, 131, 38],
           [83, 172, 253, 326, 391, 448, 497, 538, 571, 596, 613, 612, 611, 610, 609, 588, 559, 522, 477, 424, 363, 294,
            217, 132, 39],
           [82, 171, 252, 325, 390, 447, 496, 537, 570, 595, 594, 593, 592, 591, 590, 589, 560, 523, 478, 425, 364, 295,
            218, 133, 40],
           [81, 170, 251, 324, 389, 446, 495, 536, 569, 568, 567, 566, 565, 564, 563, 562, 561, 524, 479, 426, 365, 296,
            219, 134, 41],
           [80, 169, 250, 323, 388, 445, 494, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 480, 427, 366, 297,
            220, 135, 42],
           [79, 168, 249, 322, 387, 444, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 428, 367, 298,
            221, 136, 43],
           [78, 167, 248, 321, 386, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 368, 299,
            222, 137, 44],
           [77, 166, 247, 320, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 300,
            223, 138, 45],
           [76, 165, 246, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301,
            224, 139, 46],
           [75, 164, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226,
            225, 140, 47],
           [74, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143,
            142, 141, 48],
           [73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49]]

array0 = [[]]

print(snail(array4))

'''
какая-то забавная тема, почекай
|
V
'''
# def snail(array):
#     mission = Game(array)
#     path = []
#     while mission.we_are_not_done:
#         path.append(mission.dig_at_location())
#         if mission.it_is_safe_to_slither:
#             mission.slither_onwards_good_soldier()
#         else:
#             mission.turn_away_from_fire()
#             mission.slither_onwards_good_soldier()
#     return path
#
#
# class Game(object):
#     def __init__(self, array):
#         self.map = array
#         self.moves_left = len(array) * len(array[0])
#         self.coords = {"x": 0, "y": len(array) - 1}  # start in NW area.
#         self.dir = "E"  # slitherin' east.
#         self.fire = {"min_x": -1, "min_y": -1, "max_x": len(array),
#                      "max_y": len(array)}  # the carpet is lava.
#         self.rules = {"N": {"x": 0, "y": 1, "turn": "E"},
#                       "E": {"x": 1, "y": 0, "turn": "S"},
#                       "S": {"x": 0, "y": -1, "turn": "W"},
#                       "W": {"x": -1, "y": 0, "turn": "N"}}
#
#     def slither_onwards_good_soldier(self):
#         self.coords["x"] = self.next_x
#         self.coords["y"] = self.next_y
#         self._subtract_move()
#
#     def turn_away_from_fire(self):
#         self._become_aware_that_the_world_is_closing_in()
#         self.dir = self.rules[self.dir]["turn"]
#
#     def dig_at_location(self):
#         # have to invert the y location for the purpose of the array.
#         return self.map[len(self.map) - self.coords["y"] - 1][self.coords["x"]]
#
#     def report_in(self):
#         print("Dear Sir! I'm stationed @ x: %s, y: %s, heading %s." %
#               (self.coords["x"], self.coords["y"], self.dir))
#
#     @property
#     def it_is_safe_to_slither(self):
#         x = self.next_x
#         y = self.next_y
#         if x != self.fire["min_x"] and \
#                 x != self.fire["max_x"] and \
#                 y != self.fire["min_y"] and \
#                 y != self.fire["max_y"]:
#             return True
#
#     @property
#     def we_are_not_done(self):
#         if self.moves_left > 0:
#             return True
#
#     @property
#     def next_x(self):
#         return self.coords["x"] + self.rules[self.dir]["x"]
#
#     @property
#     def next_y(self):
#         return self.coords["y"] + self.rules[self.dir]["y"]
#
#     def _become_aware_that_the_world_is_closing_in(self):
#         if self.dir == "N":
#             self.fire["min_x"] += 1
#         if self.dir == "E":
#             self.fire["max_y"] -= 1
#         if self.dir == "S":
#             self.fire["max_x"] -= 1
#         if self.dir == "W":
#             self.fire["min_y"] += 1
#
#     def _subtract_move(self):
#         self.moves_left -= 1
#
#
# print(snail(array3))
